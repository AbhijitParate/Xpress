// Generated from /Users/abhijit/WebstormProjects/xpress-react/xpress/grammar/XpressionLexer.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,54,346,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,
0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,
15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,
1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,
1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,
34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,
1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,
47,5,47,264,8,47,10,47,12,47,267,9,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,
5,48,276,8,48,10,48,12,48,279,9,48,1,49,1,49,1,49,1,49,5,49,285,8,49,10,
49,12,49,288,9,49,1,49,1,49,1,49,1,49,5,49,294,8,49,10,49,12,49,297,9,49,
1,49,1,49,3,49,301,8,49,1,50,4,50,304,8,50,11,50,12,50,305,1,50,3,50,309,
8,50,1,50,4,50,312,8,50,11,50,12,50,313,3,50,316,8,50,1,51,1,51,1,51,1,51,
1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,332,8,52,1,53,1,53,
5,53,336,8,53,10,53,12,53,339,9,53,1,54,3,54,342,8,54,1,55,3,55,345,8,55,
1,265,0,56,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
49,99,50,101,51,103,52,105,53,107,54,109,0,111,0,1,0,16,3,0,9,10,12,13,32,
32,2,0,10,10,13,13,1,0,34,34,1,0,39,39,1,0,48,57,2,0,78,78,110,110,2,0,85,
85,117,117,2,0,76,76,108,108,2,0,84,84,116,116,2,0,82,82,114,114,2,0,69,
69,101,101,2,0,70,70,102,102,2,0,65,65,97,97,2,0,83,83,115,115,3,0,65,90,
95,95,97,122,4,0,48,57,65,90,95,95,97,122,355,0,1,1,0,0,0,0,3,1,0,0,0,0,
5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,
0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,
0,0,0,0,107,1,0,0,0,1,113,1,0,0,0,3,115,1,0,0,0,5,117,1,0,0,0,7,119,1,0,
0,0,9,121,1,0,0,0,11,123,1,0,0,0,13,125,1,0,0,0,15,127,1,0,0,0,17,129,1,
0,0,0,19,131,1,0,0,0,21,133,1,0,0,0,23,135,1,0,0,0,25,137,1,0,0,0,27,139,
1,0,0,0,29,142,1,0,0,0,31,145,1,0,0,0,33,147,1,0,0,0,35,149,1,0,0,0,37,152,
1,0,0,0,39,154,1,0,0,0,41,157,1,0,0,0,43,160,1,0,0,0,45,163,1,0,0,0,47,165,
1,0,0,0,49,167,1,0,0,0,51,169,1,0,0,0,53,171,1,0,0,0,55,173,1,0,0,0,57,175,
1,0,0,0,59,179,1,0,0,0,61,186,1,0,0,0,63,191,1,0,0,0,65,195,1,0,0,0,67,199,
1,0,0,0,69,202,1,0,0,0,71,207,1,0,0,0,73,214,1,0,0,0,75,219,1,0,0,0,77,223,
1,0,0,0,79,226,1,0,0,0,81,233,1,0,0,0,83,239,1,0,0,0,85,248,1,0,0,0,87,250,
1,0,0,0,89,253,1,0,0,0,91,255,1,0,0,0,93,257,1,0,0,0,95,259,1,0,0,0,97,271,
1,0,0,0,99,300,1,0,0,0,101,303,1,0,0,0,103,317,1,0,0,0,105,331,1,0,0,0,107,
333,1,0,0,0,109,341,1,0,0,0,111,344,1,0,0,0,113,114,5,39,0,0,114,2,1,0,0,
0,115,116,5,34,0,0,116,4,1,0,0,0,117,118,5,46,0,0,118,6,1,0,0,0,119,120,
5,36,0,0,120,8,1,0,0,0,121,122,5,35,0,0,122,10,1,0,0,0,123,124,5,64,0,0,
124,12,1,0,0,0,125,126,5,63,0,0,126,14,1,0,0,0,127,128,5,43,0,0,128,16,1,
0,0,0,129,130,5,45,0,0,130,18,1,0,0,0,131,132,5,42,0,0,132,20,1,0,0,0,133,
134,5,47,0,0,134,22,1,0,0,0,135,136,5,37,0,0,136,24,1,0,0,0,137,138,5,94,
0,0,138,26,1,0,0,0,139,140,5,38,0,0,140,141,5,38,0,0,141,28,1,0,0,0,142,
143,5,124,0,0,143,144,5,124,0,0,144,30,1,0,0,0,145,146,5,33,0,0,146,32,1,
0,0,0,147,148,5,62,0,0,148,34,1,0,0,0,149,150,5,62,0,0,150,151,5,61,0,0,
151,36,1,0,0,0,152,153,5,60,0,0,153,38,1,0,0,0,154,155,5,60,0,0,155,156,
5,61,0,0,156,40,1,0,0,0,157,158,5,61,0,0,158,159,5,61,0,0,159,42,1,0,0,0,
160,161,5,33,0,0,161,162,5,61,0,0,162,44,1,0,0,0,163,164,5,40,0,0,164,46,
1,0,0,0,165,166,5,41,0,0,166,48,1,0,0,0,167,168,5,91,0,0,168,50,1,0,0,0,
169,170,5,93,0,0,170,52,1,0,0,0,171,172,5,123,0,0,172,54,1,0,0,0,173,174,
5,125,0,0,174,56,1,0,0,0,175,176,7,0,0,0,176,177,1,0,0,0,177,178,6,28,0,
0,178,58,1,0,0,0,179,180,5,105,0,0,180,181,5,109,0,0,181,182,5,112,0,0,182,
183,5,111,0,0,183,184,5,114,0,0,184,185,5,116,0,0,185,60,1,0,0,0,186,187,
5,102,0,0,187,188,5,114,0,0,188,189,5,111,0,0,189,190,5,109,0,0,190,62,1,
0,0,0,191,192,5,102,0,0,192,193,5,117,0,0,193,194,5,110,0,0,194,64,1,0,0,
0,195,196,5,100,0,0,196,197,5,101,0,0,197,198,5,102,0,0,198,66,1,0,0,0,199,
200,5,105,0,0,200,201,5,102,0,0,201,68,1,0,0,0,202,203,5,101,0,0,203,204,
5,108,0,0,204,205,5,115,0,0,205,206,5,101,0,0,206,70,1,0,0,0,207,208,5,115,
0,0,208,209,5,119,0,0,209,210,5,105,0,0,210,211,5,116,0,0,211,212,5,99,0,
0,212,213,5,104,0,0,213,72,1,0,0,0,214,215,5,99,0,0,215,216,5,97,0,0,216,
217,5,115,0,0,217,218,5,101,0,0,218,74,1,0,0,0,219,220,5,102,0,0,220,221,
5,111,0,0,221,222,5,114,0,0,222,76,1,0,0,0,223,224,5,105,0,0,224,225,5,110,
0,0,225,78,1,0,0,0,226,227,5,114,0,0,227,228,5,101,0,0,228,229,5,116,0,0,
229,230,5,117,0,0,230,231,5,114,0,0,231,232,5,110,0,0,232,80,1,0,0,0,233,
234,5,98,0,0,234,235,5,114,0,0,235,236,5,101,0,0,236,237,5,97,0,0,237,238,
5,107,0,0,238,82,1,0,0,0,239,240,5,99,0,0,240,241,5,111,0,0,241,242,5,110,
0,0,242,243,5,116,0,0,243,244,5,105,0,0,244,245,5,110,0,0,245,246,5,117,
0,0,246,247,5,101,0,0,247,84,1,0,0,0,248,249,5,61,0,0,249,86,1,0,0,0,250,
251,5,43,0,0,251,252,5,61,0,0,252,88,1,0,0,0,253,254,5,44,0,0,254,90,1,0,
0,0,255,256,5,58,0,0,256,92,1,0,0,0,257,258,5,95,0,0,258,94,1,0,0,0,259,
260,5,47,0,0,260,261,5,42,0,0,261,265,1,0,0,0,262,264,9,0,0,0,263,262,1,
0,0,0,264,267,1,0,0,0,265,266,1,0,0,0,265,263,1,0,0,0,266,268,1,0,0,0,267,
265,1,0,0,0,268,269,5,42,0,0,269,270,5,47,0,0,270,96,1,0,0,0,271,272,5,47,
0,0,272,273,5,47,0,0,273,277,1,0,0,0,274,276,8,1,0,0,275,274,1,0,0,0,276,
279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,98,1,0,0,0,279,277,1,0,0,
0,280,286,3,3,1,0,281,285,8,2,0,0,282,283,5,92,0,0,283,285,5,34,0,0,284,
281,1,0,0,0,284,282,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,
0,0,287,289,1,0,0,0,288,286,1,0,0,0,289,290,3,3,1,0,290,301,1,0,0,0,291,
295,3,1,0,0,292,294,8,3,0,0,293,292,1,0,0,0,294,297,1,0,0,0,295,293,1,0,
0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,295,1,0,0,0,298,299,3,1,0,0,299,
301,1,0,0,0,300,280,1,0,0,0,300,291,1,0,0,0,301,100,1,0,0,0,302,304,7,4,
0,0,303,302,1,0,0,0,304,305,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,
315,1,0,0,0,307,309,5,46,0,0,308,307,1,0,0,0,308,309,1,0,0,0,309,311,1,0,
0,0,310,312,7,4,0,0,311,310,1,0,0,0,312,313,1,0,0,0,313,311,1,0,0,0,313,
314,1,0,0,0,314,316,1,0,0,0,315,308,1,0,0,0,315,316,1,0,0,0,316,102,1,0,
0,0,317,318,7,5,0,0,318,319,7,6,0,0,319,320,7,7,0,0,320,321,7,7,0,0,321,
104,1,0,0,0,322,323,7,8,0,0,323,324,7,9,0,0,324,325,7,6,0,0,325,332,7,10,
0,0,326,327,7,11,0,0,327,328,7,12,0,0,328,329,7,7,0,0,329,330,7,13,0,0,330,
332,7,10,0,0,331,322,1,0,0,0,331,326,1,0,0,0,332,106,1,0,0,0,333,337,3,109,
54,0,334,336,3,111,55,0,335,334,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,
337,338,1,0,0,0,338,108,1,0,0,0,339,337,1,0,0,0,340,342,7,14,0,0,341,340,
1,0,0,0,342,110,1,0,0,0,343,345,7,15,0,0,344,343,1,0,0,0,345,112,1,0,0,0,
15,0,265,277,284,286,295,300,305,308,313,315,331,337,341,344,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class XpressionLexer extends antlr4.Lexer {

    static grammarFileName = "XpressionLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'''", "'\"'", "'.'", "'$'", "'#'", "'@'", 
                         "'?'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", 
                         "'&&'", "'||'", "'!'", "'>'", "'>='", "'<'", "'<='", 
                         "'=='", "'!='", "'('", "')'", "'['", "']'", "'{'", 
                         "'}'", null, "'import'", "'from'", "'fun'", "'def'", 
                         "'if'", "'else'", "'switch'", "'case'", "'for'", 
                         "'in'", "'return'", "'break'", "'continue'", "'='", 
                         "'+='", "','", "':'", "'_'" ];
	static symbolicNames = [ null, "SQUOTE", "DQUOTE", "ACCESSOR", "DOLLOR", 
                          "HASH", "AT", "QUE", "ADD", "SUB", "MUL", "DIV", 
                          "MOD", "POW", "AND", "OR", "NOT", "GT", "GE", 
                          "LT", "LE", "EQ", "NEQ", "LRB", "RRB", "LSB", 
                          "RSB", "LCB", "RCB", "WS", "IMPORT", "FROM", "FUNCTION", 
                          "DEF", "IF", "ELSE", "SWITCH", "CASE", "FOR", 
                          "IN", "RETURN", "BREAK", "CONTINUE", "ASSIGN", 
                          "APPEND", "COMMA", "COLON", "UNDERSCORE", "MultiLineComment", 
                          "SingleLineComment", "TEXT", "NUMBER", "NULL", 
                          "BOOLEAN", "IDENTIFIER" ];
	static ruleNames = [ "SQUOTE", "DQUOTE", "ACCESSOR", "DOLLOR", "HASH", 
                      "AT", "QUE", "ADD", "SUB", "MUL", "DIV", "MOD", "POW", 
                      "AND", "OR", "NOT", "GT", "GE", "LT", "LE", "EQ", 
                      "NEQ", "LRB", "RRB", "LSB", "RSB", "LCB", "RCB", "WS", 
                      "IMPORT", "FROM", "FUNCTION", "DEF", "IF", "ELSE", 
                      "SWITCH", "CASE", "FOR", "IN", "RETURN", "BREAK", 
                      "CONTINUE", "ASSIGN", "APPEND", "COMMA", "COLON", 
                      "UNDERSCORE", "MultiLineComment", "SingleLineComment", 
                      "TEXT", "NUMBER", "NULL", "BOOLEAN", "IDENTIFIER", 
                      "VALID_ID_START", "VALID_ID_CHAR" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

XpressionLexer.EOF = antlr4.Token.EOF;
XpressionLexer.SQUOTE = 1;
XpressionLexer.DQUOTE = 2;
XpressionLexer.ACCESSOR = 3;
XpressionLexer.DOLLOR = 4;
XpressionLexer.HASH = 5;
XpressionLexer.AT = 6;
XpressionLexer.QUE = 7;
XpressionLexer.ADD = 8;
XpressionLexer.SUB = 9;
XpressionLexer.MUL = 10;
XpressionLexer.DIV = 11;
XpressionLexer.MOD = 12;
XpressionLexer.POW = 13;
XpressionLexer.AND = 14;
XpressionLexer.OR = 15;
XpressionLexer.NOT = 16;
XpressionLexer.GT = 17;
XpressionLexer.GE = 18;
XpressionLexer.LT = 19;
XpressionLexer.LE = 20;
XpressionLexer.EQ = 21;
XpressionLexer.NEQ = 22;
XpressionLexer.LRB = 23;
XpressionLexer.RRB = 24;
XpressionLexer.LSB = 25;
XpressionLexer.RSB = 26;
XpressionLexer.LCB = 27;
XpressionLexer.RCB = 28;
XpressionLexer.WS = 29;
XpressionLexer.IMPORT = 30;
XpressionLexer.FROM = 31;
XpressionLexer.FUNCTION = 32;
XpressionLexer.DEF = 33;
XpressionLexer.IF = 34;
XpressionLexer.ELSE = 35;
XpressionLexer.SWITCH = 36;
XpressionLexer.CASE = 37;
XpressionLexer.FOR = 38;
XpressionLexer.IN = 39;
XpressionLexer.RETURN = 40;
XpressionLexer.BREAK = 41;
XpressionLexer.CONTINUE = 42;
XpressionLexer.ASSIGN = 43;
XpressionLexer.APPEND = 44;
XpressionLexer.COMMA = 45;
XpressionLexer.COLON = 46;
XpressionLexer.UNDERSCORE = 47;
XpressionLexer.MultiLineComment = 48;
XpressionLexer.SingleLineComment = 49;
XpressionLexer.TEXT = 50;
XpressionLexer.NUMBER = 51;
XpressionLexer.NULL = 52;
XpressionLexer.BOOLEAN = 53;
XpressionLexer.IDENTIFIER = 54;



